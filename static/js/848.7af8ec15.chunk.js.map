{"version":3,"file":"static/js/848.7af8ec15.chunk.js","mappings":"4QAEaA,EAAcC,EAAAA,EAAAA,GAAH,8CAIXC,EAAeD,EAAAA,EAAAA,GAAH,6C,SCkDzB,EA9CoB,WAClB,OAAkBE,EAAAA,EAAAA,MAAVC,GAAAA,OAAR,MAAW,GAAX,EACA,GAA8BC,EAAAA,EAAAA,UAAoB,IAAlD,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAyB,IAAnD,eAAOG,EAAP,KAAcC,EAAd,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WAAM,wCAId,6GAE0BC,EAAAA,EAAAA,aAA8BP,GAFxD,OAGmC,KADzBE,EAFV,QAGgBM,QAAQC,QAClBN,EAAWD,EAAQM,SACnBH,EAAS,KAETA,EAAS,2EAPf,gDAWIF,EAAW,IACXE,EAAS,EAAD,IAZZ,0DAJc,sBACTL,GADS,mCAoBdU,EACD,GAAE,CAACV,KAGF,8BACsB,kBAAXI,GAAuBA,GAAQ,uBAAIA,KAC7C,wBACCF,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACX,UAACjB,EAAD,YACE,UAACE,EAAD,sBAAuBc,MACvB,uBAAIC,MAFYD,EADP,OAYjB,C,8DCpDKE,EAAU,mCACVC,EAAW,gCAOFC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,iGAMUC,EAAgC,IAAIC,gBALtB,CAChBC,QAASL,EACTM,KAAM,IAKRC,EARN,UAQaN,EARb,8BAQ2CE,GAR3C,SAUuBK,EAAAA,EAAAA,IAAUD,GAVjC,cAUME,EAVN,OAWMC,EAASD,EAASE,KAXxB,kBAYOD,GAZP,kEAgBeE,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAqCC,GAArC,oFAUUV,EAAe,IAAIC,gBATJ,CACjBC,QAASL,EACTM,KAAK,EACLQ,MAAOD,IAOLN,EAXV,UAW0BN,EAX1B,wBAWkDE,GAXlD,SAY2BK,EAAAA,EAAAA,IAAUD,GAZrC,cAYUE,EAZV,OAaUC,EAASD,EAASE,KAb5B,kBAcWD,GAdX,kEAkBeK,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2B7B,GAA3B,oFACUiB,EAAe,IAAIC,gBAAgB,CACrCC,QAASL,IAIPO,EANV,UAMiBN,EANjB,iBAMkCf,EANlC,YAMwCiB,GANxC,SAO2BK,EAAAA,EAAAA,IAAUD,GAPrC,cAOUE,EAPV,OAQUO,EAAQP,EAASE,KAR3B,kBASWK,GATX,kEAaeC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4B/B,GAA5B,oFAOUiB,EAAe,IAAIC,gBANL,CAChBC,QAASL,EACTM,KAAM,IAKJC,EARV,UAQiBN,EARjB,iBAQkCf,EARlC,oBAQgDiB,GARhD,SAS2BK,EAAAA,EAAAA,IAAUD,GATrC,cASUE,EATV,OAUUrB,EAAUqB,EAASE,KAV7B,kBAWWvB,GAXX,kEAee8B,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BhC,GAA1B,oFACUiB,EAAe,IAAIC,gBAAgB,CACrCC,QAASL,IAIPO,EANV,UAMyBN,EANzB,iBAM0Cf,EAN1C,oBAMwDiB,GANxD,SAO2BK,EAAAA,EAAAA,IAAUD,GAPrC,cAOUE,EAPV,OAQUU,EAAUV,EAASE,KAR7B,kBASWQ,GATX,kEAaA,IAAMC,EAAM,CAAClB,oB,WA3EEA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA2EmBU,qBA7DhC,SAEaA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA2DyCG,WA3ClD,SAESA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAyCqDE,aA9BlE,SAE0B,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA4BmEC,UAfhF,SAEaA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,GAcf,K","sources":["components/Reviews/Reviews.styled.tsx","components/Reviews/Reviews.tsx","services/movies-api.ts"],"sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const ReviewsItem = styled.li`\r\nmargin-bottom: 20px;\r\n`;\r\n\r\nexport const ReviewAuthor = styled.h4`\r\nmargin-bottom: 8px;\r\n`;\r\n\r\n","import { useState, useEffect, FC } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport moviesApiService from '../../services/movies-api';\r\nimport { ReviewsItem, ReviewAuthor } from './Reviews.styled';\r\n\r\ninterface IReview {\r\n  author: string;\r\n  content: string;\r\n}\r\n\r\nconst Reviews: FC = () => {\r\n  const { id=\"\" } = useParams<{id?:string}>();\r\n  const [reviews, setReviews] = useState<IReview[]>([]);\r\n  const [error, setError] = useState<string|unknown>('');\r\n\r\n  useEffect(() => {\r\n    if (!id) {\r\n      return;\r\n    }\r\n    async function getReviews() {\r\n      try {\r\n        const reviews = await moviesApiService.fetchReviews(id);\r\n        if (reviews.results.length !== 0) {\r\n          setReviews(reviews.results);\r\n          setError('');\r\n        } else {\r\n          setError(\"üë®‚Äçüíª We don't have any reviews for this movie\");\r\n        }\r\n\r\n      } catch (error) {\r\n        setReviews([]);\r\n        setError(error);\r\n      }\r\n    }\r\n\r\n    getReviews();\r\n  }, [id]);\r\n\r\n  return (\r\n    <>\r\n      {typeof (error) === \"string\" && error ? <p>{error}</p> : \r\n     <ul>\r\n     {reviews.map(({ author, content }) => (\r\n       <ReviewsItem key={author}>\r\n         <ReviewAuthor>Author: {author}</ReviewAuthor>\r\n         <p>{content}</p>\r\n       </ReviewsItem>\r\n     ))}\r\n   </ul>\r\n    }\r\n    </>\r\n   \r\n    \r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n","import axios from \"axios\";\r\n\r\nconst API_KEY = \"0dd8a44a838b85596fd1a072a37c7f7d\";\r\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\r\n\r\n// type SearchParams = {\r\n//     api_key: string;\r\n//     page: number;\r\n// }\r\n\r\nasync function fetchTrandingMovies () {\r\n    const params: any = {\r\n        api_key: API_KEY,\r\n        page: 1\r\n    };\r\n    \r\n    const searchParams: URLSearchParams = new URLSearchParams(params);\r\n\r\nconst url=`${BASE_URL}trending/movie/day?${searchParams}`;\r\n\r\nconst response = await axios.get(url);\r\nconst movies = response.data;\r\nreturn movies;\r\n\r\n};\r\n\r\nasync function fetchSearchingMovies (queryString: string) {\r\n     const params: any = {\r\n        api_key: API_KEY,\r\n        page:1, \r\n        query: queryString\r\n\r\n    };\r\n    \r\n    \r\n    \r\n    const searchParams = new URLSearchParams(params);\r\n    const url: string =`${BASE_URL}search/movie?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const movies = response.data;\r\n    return movies;\r\n    \r\n    };\r\n\r\nasync function fetchMovie (id: string) {\r\n    const searchParams = new URLSearchParams({\r\n        api_key: API_KEY\r\n\r\n    });\r\n    \r\n    const url=`${BASE_URL}movie/${id}?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const movie = response.data;\r\n    return movie;\r\n\r\n};\r\n\r\nasync function fetchReviews(id: string) {\r\n    const params: any = {\r\n        api_key: API_KEY,\r\n        page: 1\r\n\r\n    };\r\n\r\n    const searchParams = new URLSearchParams(params);\r\n    const url=`${BASE_URL}movie/${id}/reviews?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const reviews = response.data;\r\n    return reviews;\r\n\r\n};\r\n\r\nasync function fetchCast (id: string) {\r\n    const searchParams = new URLSearchParams({\r\n        api_key: API_KEY\r\n\r\n    });\r\n\r\n    const url: string=`${BASE_URL}movie/${id}/credits?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const credits = response.data;\r\n    return credits;\r\n\r\n};\r\n\r\nconst api = {fetchTrandingMovies, fetchSearchingMovies, fetchMovie, fetchReviews, fetchCast};\r\nexport default api;"],"names":["ReviewsItem","styled","ReviewAuthor","useParams","id","useState","reviews","setReviews","error","setError","useEffect","moviesApiService","results","length","getReviews","map","author","content","API_KEY","BASE_URL","fetchTrandingMovies","searchParams","URLSearchParams","api_key","page","url","axios","response","movies","data","fetchSearchingMovies","queryString","query","fetchMovie","movie","fetchReviews","fetchCast","credits","api"],"sourceRoot":""}