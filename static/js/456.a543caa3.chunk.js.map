{"version":3,"file":"static/js/456.a543caa3.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.tsx","components/Cast/Cast.tsx","services/movies-api.ts"],"sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const CastList = styled.ul`\r\n    list-style-type: none;\r\n`\r\n\r\nexport const CastItem = styled.li`\r\nmargin-bottom: 12px;\r\n`;\r\n\r\nexport const ActorName = styled.h4`\r\nmargin-bottom: 8px;\r\n`;\r\n\r\nexport const ActorPhoto = styled.img`\r\nborder-radius: 5px;\r\n`;","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport moviesApiService from '../../services/movies-api';\r\nimport { CastItem, ActorPhoto, ActorName, CastList } from './Cast.styled';\r\n\r\ninterface ICast {\r\n   \r\n  cast_id: string;\r\n  character: string;\r\n  name: string;\r\n  profile_path: string;\r\n}\r\n\r\n\r\nconst Cast = () => {\r\n  const { id=\"\" } = useParams<{id?:string}>();\r\n  const [cast, setCast] = useState<ICast[]>([]);\r\n  const [error, setError] = useState<string | unknown>('');\r\n  const defaultImg: string = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\r\n\r\n  useEffect(() => {\r\n    if (!id) {\r\n      return;\r\n    }\r\n    async function getCast() {\r\n      try {\r\n        const credits = await moviesApiService.fetchCast(id);\r\n      \r\n        if (credits.cast.length !== 0) {\r\n          setCast(credits.cast);\r\n          setError('');\r\n        } else {\r\n          setError(\"ü¶∏‚Äç‚ôÇÔ∏è We don't have any cast for this movie\");\r\n    \r\n        }\r\n      } catch (error) {\r\n        setCast([]);\r\n        setError(error);\r\n      }\r\n    }\r\n\r\n    getCast();\r\n  }, [id]);\r\n\r\n  return (\r\n    <>{\r\n        typeof (error) === \"string\" && error ? <p>{error}</p> \r\n        :<CastList>\r\n        {cast.map(({ cast_id, character, name, profile_path }) => (\r\n          <CastItem key={cast_id}>\r\n            <ActorPhoto\r\n              src={profile_path ?           \r\n                   `https://image.tmdb.org/t/p/w500${profile_path}`\r\n                   : defaultImg}\r\n              alt={name}\r\n              width=\"70\"\r\n            />\r\n            <ActorName>{name}</ActorName>\r\n            <p>Charecter: {character}</p>\r\n          </CastItem>\r\n        ))}\r\n      </CastList>\r\n    }\r\n    </>\r\n   \r\n  );\r\n};\r\n\r\nexport default Cast;\r\n","import axios from \"axios\";\r\n\r\nconst API_KEY = \"0dd8a44a838b85596fd1a072a37c7f7d\";\r\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\r\n\r\n// type SearchParams = {\r\n//     api_key: string;\r\n//     page: number;\r\n// }\r\n\r\nasync function fetchTrandingMovies () {\r\n    const params: any = {\r\n        api_key: API_KEY,\r\n        page: 1\r\n    };\r\n    \r\n    const searchParams: URLSearchParams = new URLSearchParams(params);\r\n\r\nconst url=`${BASE_URL}trending/movie/day?${searchParams}`;\r\n\r\nconst response = await axios.get(url);\r\nconst movies = response.data;\r\nreturn movies;\r\n\r\n};\r\n\r\nasync function fetchSearchingMovies (queryString: string) {\r\n     const params: any = {\r\n        api_key: API_KEY,\r\n        page:1, \r\n        query: queryString\r\n\r\n    };\r\n    \r\n    \r\n    \r\n    const searchParams = new URLSearchParams(params);\r\n    const url: string =`${BASE_URL}search/movie?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const movies = response.data;\r\n    return movies;\r\n    \r\n    };\r\n\r\nasync function fetchMovie (id: string) {\r\n    const searchParams = new URLSearchParams({\r\n        api_key: API_KEY\r\n\r\n    });\r\n    \r\n    const url=`${BASE_URL}movie/${id}?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const movie = response.data;\r\n    return movie;\r\n\r\n};\r\n\r\nasync function fetchReviews(id: string) {\r\n    const params: any = {\r\n        api_key: API_KEY,\r\n        page: 1\r\n\r\n    };\r\n\r\n    const searchParams = new URLSearchParams(params);\r\n    const url=`${BASE_URL}movie/${id}/reviews?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const reviews = response.data;\r\n    return reviews;\r\n\r\n};\r\n\r\nasync function fetchCast (id: string) {\r\n    const searchParams = new URLSearchParams({\r\n        api_key: API_KEY\r\n\r\n    });\r\n\r\n    const url: string=`${BASE_URL}movie/${id}/credits?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const credits = response.data;\r\n    return credits;\r\n\r\n};\r\n\r\nconst api = {fetchTrandingMovies, fetchSearchingMovies, fetchMovie, fetchReviews, fetchCast};\r\nexport default api;"],"names":["CastList","styled","CastItem","ActorName","ActorPhoto","useParams","id","useState","cast","setCast","error","setError","useEffect","moviesApiService","credits","length","getCast","map","cast_id","character","name","profile_path","src","alt","width","API_KEY","BASE_URL","fetchTrandingMovies","searchParams","URLSearchParams","api_key","page","url","axios","response","movies","data","fetchSearchingMovies","queryString","query","fetchMovie","movie","fetchReviews","reviews","fetchCast","api"],"sourceRoot":""}