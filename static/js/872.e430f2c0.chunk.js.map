{"version":3,"file":"static/js/872.e430f2c0.chunk.js","mappings":"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","sources":["pages/Home/Home.tsx","services/movies-api.ts","../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../node_modules/date-fns/esm/toDate/index.js","../node_modules/date-fns/esm/getYear/index.js"],"sourcesContent":["import { useState, useEffect, FC } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { getYear } from 'date-fns';\r\n\r\nimport moviesApiService from '../../services/movies-api';\r\n\r\nimport { IMovie } from \"../MovieDetails/MovieDetails\"\r\n\r\nconst Home: FC = () => {\r\n  const [trandingMovies, setTrandingMovies] = useState<IMovie[]>([]);\r\n  const [error, setError] = useState<string|unknown>('');\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    async function getTrandingMovies() {\r\n      try {\r\n        const movies = await moviesApiService.fetchTrandingMovies();\r\n        setTrandingMovies(movies.results);\r\n        setError('');\r\n\r\n      } catch (error) {\r\n        setTrandingMovies([]);\r\n        setError(error);\r\n      }\r\n    }\r\n    getTrandingMovies();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Trending today</h1>\r\n      {typeof(error) === 'string' && error ? (\r\n        <p>{error}</p>\r\n      ) : (\r\n        <ul>\r\n          {trandingMovies.map(({ id, title, release_date }) => (\r\n            <li key={id}>\r\n              <Link to={`movies/${id}`} state={{ from: location }}>\r\n                {title} ({getYear(new Date(release_date))})\r\n              </Link>\r\n            </li>\r\n          ))}\r\n          </ul>\r\n          \r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import axios from \"axios\";\r\n\r\nconst API_KEY = \"0dd8a44a838b85596fd1a072a37c7f7d\";\r\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\r\n\r\n// type SearchParams = {\r\n//     api_key: string;\r\n//     page: number;\r\n// }\r\n\r\nasync function fetchTrandingMovies () {\r\n    const params: any = {\r\n        api_key: API_KEY,\r\n        page: 1\r\n    };\r\n    \r\n    const searchParams: URLSearchParams = new URLSearchParams(params);\r\n\r\nconst url=`${BASE_URL}trending/movie/day?${searchParams}`;\r\n\r\nconst response = await axios.get(url);\r\nconst movies = response.data;\r\nreturn movies;\r\n\r\n};\r\n\r\nasync function fetchSearchingMovies (queryString: string) {\r\n     const params: any = {\r\n        api_key: API_KEY,\r\n        page:1, \r\n        query: queryString\r\n\r\n    };\r\n    \r\n    \r\n    \r\n    const searchParams = new URLSearchParams(params);\r\n    const url: string =`${BASE_URL}search/movie?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const movies = response.data;\r\n    return movies;\r\n    \r\n    };\r\n\r\nasync function fetchMovie (id: string) {\r\n    const searchParams = new URLSearchParams({\r\n        api_key: API_KEY\r\n\r\n    });\r\n    \r\n    const url=`${BASE_URL}movie/${id}?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const movie = response.data;\r\n    return movie;\r\n\r\n};\r\n\r\nasync function fetchReviews(id: string) {\r\n    const params: any = {\r\n        api_key: API_KEY,\r\n        page: 1\r\n\r\n    };\r\n\r\n    const searchParams = new URLSearchParams(params);\r\n    const url=`${BASE_URL}movie/${id}/reviews?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const reviews = response.data;\r\n    return reviews;\r\n\r\n};\r\n\r\nasync function fetchCast (id: string) {\r\n    const searchParams = new URLSearchParams({\r\n        api_key: API_KEY\r\n\r\n    });\r\n\r\n    const url: string=`${BASE_URL}movie/${id}/credits?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const credits = response.data;\r\n    return credits;\r\n\r\n};\r\n\r\nconst api = {fetchTrandingMovies, fetchSearchingMovies, fetchMovie, fetchReviews, fetchCast};\r\nexport default api;","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\");\n      // eslint-disable-next-line no-console\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getFullYear();\n}"],"names":["useState","trandingMovies","setTrandingMovies","error","setError","location","useLocation","useEffect","moviesApiService","movies","results","getTrandingMovies","map","id","title","release_date","to","state","from","getYear","Date","API_KEY","BASE_URL","fetchTrandingMovies","searchParams","URLSearchParams","api_key","page","url","axios","response","data","fetchSearchingMovies","queryString","query","fetchMovie","movie","fetchReviews","reviews","fetchCast","credits","api","requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","_typeof","getTime","console","warn","Error","stack","NaN","dirtyDate","getFullYear"],"sourceRoot":""}