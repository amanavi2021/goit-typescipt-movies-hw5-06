{"version":3,"file":"static/js/264.386e2ab2.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.styled.tsx","pages/MovieDetails/MovieDetails.tsx","services/movies-api.ts"],"sourcesContent":["import styled from \"@emotion/styled\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nexport const BackLink = styled(Link)`\r\nborder: 1px solid black;\r\npadding: 5px 10px;\r\ntext-decoration: none;\r\nborder-radius: 10px;\r\ndisplay: flex;\r\nwidth: 90px;\r\ncolor: black;\r\nmargin-bottom: 16px;\r\ntransition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n&:hover, focus{\r\n    color:rgb(196, 185, 185);\r\n}\r\n\r\n`;\r\n\r\nexport const MovieCard = styled.div`\r\ndisplay:flex;\r\n`;\r\n\r\nexport const MovieImage = styled.img`\r\nborder-radius: 10px;\r\n`;\r\n\r\nexport const MovieInfo = styled.div`\r\npadding-left: 16px;\r\ndisplay:flex;\r\nflex-direction: column;\r\ngap: 16px;\r\n`;\r\n\r\n\r\nexport const InfoLink = styled(NavLink)`\r\n// padding:  8px 8px;\r\ntext-decoration: none;\r\nfont-weight: 500;\r\ncolor: black;\r\ntransition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n&.active\r\n{\r\n    color: rgb(255, 0, 111);\r\n};\r\n\r\n&:hover, focus{\r\n    color:rgb(196, 185, 185);\r\n}\r\n`;\r\n\r\nexport const MovieNav = styled.ul`\r\nlist-style-type: none;\r\ndisplay: flex;\r\nflex-direction: column;\r\ngap: 8px;\r\n\r\n`;\r\n","import { useState, useEffect, useRef, Suspense, FC } from 'react';\r\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\r\nimport { getYear } from 'date-fns';\r\nimport { IoArrowBackCircleSharp } from 'react-icons/io5';\r\nimport moviesApiService from '../../services/movies-api';\r\nimport {\r\n  BackLink,\r\n  MovieCard,\r\n  MovieImage,\r\n  MovieInfo,\r\n  InfoLink,\r\n  MovieNav,\r\n} from './MovieDetails.styled';\r\n\r\ntype Genre = {\r\n  name: string;\r\n}\r\n\r\nexport interface IMovie {\r\n  id?: string;\r\n  title: string;\r\n  overview: string;\r\n  vote_average: number;\r\n  release_date: Date;\r\n  poster_path: string;\r\n  genres: Genre[]\r\n}\r\n\r\nconst initialValues = {\r\n  title: \"\",\r\n  overview: \"\",\r\n  vote_average: 0,\r\n  release_date: new Date(),\r\n  poster_path: \"\",\r\n  genres: []\r\n}\r\n\r\nconst MovieDetails: FC = () => {\r\n  \r\n  const { id=\"\"} = useParams<{id?:string}>();\r\n  const [movie, setMovie] = useState<IMovie>(initialValues);\r\n  const [error, setError] = useState<string|unknown>('');\r\n  const location = useLocation();\r\n  const backLink = useRef<string>(location.state?.from ?? '/');\r\n\r\n  useEffect(() => {\r\n    if (!id) {\r\n      return;\r\n    }\r\n    async function getMovieDetails() {\r\n      try {\r\n        const movie = await moviesApiService.fetchMovie(id);\r\n        setMovie(movie);\r\n        setError('');\r\n      } catch (error) {\r\n        setMovie(initialValues);\r\n        setError(error);\r\n      }\r\n    }\r\n\r\n    getMovieDetails();\r\n  }, [id]);\r\n\r\n  const { title, overview, vote_average, release_date, poster_path, genres } =\r\n    movie;\r\n  const year: number = getYear(new Date(release_date));\r\n  let genreList = '';\r\n  if (genres.length !== 0) {\r\n    genreList = genres.map(genre => genre.name).join(' ') ?? '';\r\n  }\r\n\r\n  const defaultImg: string =\r\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\r\n\r\n  return (\r\n    <>\r\n      <BackLink to={backLink.current}>\r\n        <IoArrowBackCircleSharp\r\n          style={{ marginRight: 8, width: '20', height: '20' }}\r\n        />\r\n        Go back\r\n      </BackLink>\r\n      {movie.title !== \"\" && !error && (\r\n        <div>\r\n          <MovieCard>\r\n            <MovieImage\r\n              src={\r\n                poster_path\r\n                  ? `https://image.tmdb.org/t/p/w500${poster_path}`\r\n                  : defaultImg\r\n              }\r\n              alt={title}\r\n              width=\"200\"\r\n            />\r\n            <MovieInfo>\r\n              <h2>\r\n                {title} ({year})\r\n              </h2>\r\n              <p>User Score: {Math.round(vote_average * 10)}% </p>\r\n              <h3>Overview</h3>\r\n              <p>{overview}</p>\r\n              <h3>Genres</h3>\r\n              <p>{genreList}</p>\r\n            </MovieInfo>\r\n          </MovieCard>\r\n          <hr />\r\n          <h3>Additional information</h3>\r\n          <MovieNav>\r\n            <li>\r\n              <InfoLink to=\"cast\">Cast</InfoLink>\r\n            </li>\r\n            <li>\r\n              <InfoLink to=\"reviews\">Reviews</InfoLink>\r\n            </li>\r\n          </MovieNav>\r\n          <hr />\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <Outlet />\r\n          </Suspense>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n","import axios from \"axios\";\r\n\r\nconst API_KEY = \"0dd8a44a838b85596fd1a072a37c7f7d\";\r\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\r\n\r\n// type SearchParams = {\r\n//     api_key: string;\r\n//     page: number;\r\n// }\r\n\r\nasync function fetchTrandingMovies () {\r\n    const params: any = {\r\n        api_key: API_KEY,\r\n        page: 1\r\n    };\r\n    \r\n    const searchParams: URLSearchParams = new URLSearchParams(params);\r\n\r\nconst url=`${BASE_URL}trending/movie/day?${searchParams}`;\r\n\r\nconst response = await axios.get(url);\r\nconst movies = response.data;\r\nreturn movies;\r\n\r\n};\r\n\r\nasync function fetchSearchingMovies (queryString: string) {\r\n     const params: any = {\r\n        api_key: API_KEY,\r\n        page:1, \r\n        query: queryString\r\n\r\n    };\r\n    \r\n    \r\n    \r\n    const searchParams = new URLSearchParams(params);\r\n    const url: string =`${BASE_URL}search/movie?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const movies = response.data;\r\n    return movies;\r\n    \r\n    };\r\n\r\nasync function fetchMovie (id: string) {\r\n    const searchParams = new URLSearchParams({\r\n        api_key: API_KEY\r\n\r\n    });\r\n    \r\n    const url=`${BASE_URL}movie/${id}?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const movie = response.data;\r\n    return movie;\r\n\r\n};\r\n\r\nasync function fetchReviews(id: string) {\r\n    const params: any = {\r\n        api_key: API_KEY,\r\n        page: 1\r\n\r\n    };\r\n\r\n    const searchParams = new URLSearchParams(params);\r\n    const url=`${BASE_URL}movie/${id}/reviews?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const reviews = response.data;\r\n    return reviews;\r\n\r\n};\r\n\r\nasync function fetchCast (id: string) {\r\n    const searchParams = new URLSearchParams({\r\n        api_key: API_KEY\r\n\r\n    });\r\n\r\n    const url: string=`${BASE_URL}movie/${id}/credits?${searchParams}`;\r\n    const response = await axios.get(url);\r\n    const credits = response.data;\r\n    return credits;\r\n\r\n};\r\n\r\nconst api = {fetchTrandingMovies, fetchSearchingMovies, fetchMovie, fetchReviews, fetchCast};\r\nexport default api;"],"names":["BackLink","styled","Link","MovieCard","MovieImage","MovieInfo","InfoLink","NavLink","MovieNav","initialValues","title","overview","vote_average","release_date","Date","poster_path","genres","useParams","id","useState","movie","setMovie","error","setError","location","useLocation","backLink","useRef","state","from","useEffect","moviesApiService","getMovieDetails","year","getYear","genreList","length","map","genre","name","join","to","current","style","marginRight","width","height","src","alt","Math","round","Suspense","fallback","API_KEY","BASE_URL","fetchTrandingMovies","searchParams","URLSearchParams","api_key","page","url","axios","response","movies","data","fetchSearchingMovies","queryString","query","fetchMovie","fetchReviews","reviews","fetchCast","credits","api"],"sourceRoot":""}